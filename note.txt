api token : xoxb-182470253664-BX6FLRWvCu33PNs2yWAkkJMP
/invite botname or /remove botname


//test channel > bot_test is created
what bot can do 

//send message to the channel


//basic response
> event is dispatch

> authenticated event

> message event> trigger when a message is sent back to the bot with direct message to the bot
//message obj = full data = user , channel


//add avoid spam
>spam the channel
>> code:
if (/(hello|hi) (bot|awesomebot)/g.test(msg)) {
  // Infinite loop spamming the channel every 100 milliseconds
  setInterval(() => {
    slack.sendMessage('Spam!', channel.id);
  }, 100);
}
> code to set interval> make sure that use send mess after 1s
>>setInterval(() => {
    // Get the current timestamp
    let currentTime = Date.now();
        
    // Make sure we only allow a message once a full second has // passed 
    if ((currentTime - sentTime) > 1000) {

      slack.sendMesssage('Limiting my messages to 1 per second', channel.id);

      // Set the new sentTime
      sentTime = Date.now();
    }
  }, 100);
}

> slack api provide timestamp on the channel obj > 
>>channel.latest.ts

>> sending a direct message
>> dm object 


>> restrict access
>>restric the bot with some
>> is_admin()
>>uptime >> only admin will be responsed > other cannot be reponse> restrict the command 
>>> >. 
slack.on(RTM_EVENTS.MESSAGE, (message) => {
  let user = slack.dataStore.getUserById(message.user)

  if (user && user.is_bot) {
    return;
  }

  let channel = slack.dataStore.getChannelGroupOrDMById(message.channel);

  if (message.text) {
    let msg = message.text.toLowerCase();

    if (/uptime/g.test(msg)) {
      if (!user.is_admin) {        
        slack.sendMessage(`Sorry ${user.name}, but that functionality is only for admins.`, channel.id);
        return;
      }

      let dm = slack.dataStore.getDMByName(user.name);

      let uptime = process.uptime();

      // get the uptime in hours, minutes and seconds
      let minutes = parseInt(uptime / 60, 10),
          hours = parseInt(minutes / 60, 10),
          seconds = parseInt(uptime - (minutes * 60) - ((hours * 60) * 60), 10);

      slack.sendMessage(`I have been running for: ${hours} hours, ${minutes} minutes and ${seconds} seconds.`, dm.id);
  }
});




======================================
>add and remove admin
>>>




=======================================
> save and retrieve data via Redis
>>client.set('hello','HelloWorld');
client.get('hello',(err, reply) => {
    if(err){
        ...
        return;
    }
    ///reply
})